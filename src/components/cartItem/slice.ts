import {createSlice, PayloadAction} from '@reduxjs/toolkit';
import {RootState} from '../../app/store';
import {IProduct} from '../../models/Product';
import {ICartItem} from '../../models/CartItem';

interface CartState {
  data: ICartItem[]
  success: boolean,
  message?: string,
}

const initialState: CartState = {
  data: [],
  success: true,
  message: undefined
};

export const slice = createSlice({
  name: 'cart',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    remove: (state, action: PayloadAction<{ product: IProduct }>) => {
      const idx = state.data.findIndex((ct: ICartItem) => ct.product.id === action.payload.product.id);
      if (idx < 0) {
        return;
      }

      const cartItem = state.data[idx];
      cartItem.quantity--;
      if (cartItem.quantity <= 0) {
        // Remove item from cart if no item left
        state.data.slice(idx, 1);
      }
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase('product/addToCart/fulfilled', (state, action: any) => {
        const itemIdx = state.data.findIndex((ct: ICartItem) => ct.product.id === action.payload.product.id);
        if (itemIdx < 0) {
          state.data.push({
            product: action.payload.product,
            quantity: action.payload.quantity
          });
        } else {
          const cartItem = state.data[itemIdx];
          cartItem.quantity += action.payload.quantity;
        }
      });
      // .addCase(fetchItems.fulfilled, (state, action) => {
      //   state.message = undefined;
      //   state.data = action.payload;
      // })
      // .addCase(fetchItems.rejected, (state) => {
      //   state.success = false;
      //   state.message = 'Loading failed!';
      // });
  },
});

export const {remove} = slice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectItems = (state: RootState) => state.cart.data;

export default slice.reducer;
