import {createSlice, PayloadAction} from '@reduxjs/toolkit';
import {RootState} from '../../app/store';


interface DiscountCodesState {
  data: string[]
  success: boolean,
  message?: string,
}

const initialState: DiscountCodesState = {
  data: [],
  success: true,
  message: undefined
};

export const slice = createSlice({
  name: 'cart',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    apply: (state, action: PayloadAction<string>) => {
      const idx = state.data.findIndex((code: string) => code.toLowerCase() === action.payload.toLowerCase());
      if (idx < 0) {
        state.data.push(action.payload);
      }
    },
    remove: (state, action: PayloadAction<string>) => {
      const idx = state.data.findIndex((code: string) => code.toLowerCase() === action.payload.toLowerCase());
      if (idx < 0) {
        return;
      }

      state.data = state.data.filter((code) => code.toLowerCase() !== action.payload.toLowerCase());
    },
    applyCodes: (state, action: PayloadAction<string[]>) => {
      state.data = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
  },
});

export const {apply, remove, applyCodes} = slice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectItems = (state: RootState) => state.discountCodes.data;

export default slice.reducer;
